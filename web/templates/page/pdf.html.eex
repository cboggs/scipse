<style>
svg {
    border: 1px solid grey;
}
.delete_button {
  stroke: red;
  stroke-width: 2px;
  fill: red;
  fill-opacity: 0.1;
}
rect {
    stroke: steelblue;
    stroke-width: 2px;
    fill: white;
    fill-opacity: 0.0;
}
.pdf-svg {
  user-select: none;
  cursor: default;
}
</style>

<script src="http://d3js.org/d3.v3.min.js"></script>

<div id="the-svg"></div>

<!--
<script>
// We'll use this as a flag to figure out if a box is zero-sized
// var rect_adjusted = false;
// var box_current_id = 0;
// var svg = d3.select("body").append("svg")
//     .attr("id", "parent-svg")
//     .attr("width", 600)
//     .attr("height", 400)
//     .on("mousedown", start_box)
//     .on("mouseup", finish_box)
//     .on("contextmenu", function(d, i) { d3.event.preventDefault(); });
// 
// fo = svg.append("foreignObject")
//     .attr("width", 499)
//     .attr("height", 499)
//     .attr("requiredExtensions", "http://www.w3.org/1999/xhtml");
// 
// fo.append("canvas")
//     .attr("id", "pdf-canvas")
//     .attr("style", "border:1px solid black");
// 
// function start_box() {
//   // Only do this work on left-click
//   if (d3.event.button == 0) {
//     mouse = d3.mouse(this);
//     g = svg.append("g")
//           .attr("id", "box_" + box_current_id)
//           .on("mouseover", box_mouseover)
//           .on("mouseout", box_mouseout)
//     rect = g.append("rect")
//         .attr("x", mouse[0])
//         .attr("y", mouse[1])
//         .attr("start_x", mouse[0])
//         .attr("start_y", mouse[1])
//         .attr("width", 0)
//         .attr("height", 1)
//         .attr("rx", 10)
//         .attr("ry", 10);
//                                               
//     svg.on("mousemove", adjust_box);
//   }
// }
// 
// function adjust_box() {
//   rect_adjusted = true;
//   mouse = d3.mouse(this);
//   start_x = rect.attr("start_x");
//   start_y = rect.attr("start_y");
// 
//   if (mouse[0] > start_x) {
//     rect.attr("width", mouse[0] - start_x);
//   }
//   if (mouse[1] > start_y) {
//     rect.attr("height", mouse[1] - start_y);
//   }
//   if (mouse[0] < start_x) {
//     rect.attr("x", mouse[0])
//         .attr("width", start_x - mouse[0]);
//   }
//   if (mouse[1] < start_y) {
//     rect.attr("y", mouse[1])
//         .attr("height", start_y - mouse[1]);
//   }
// }
// 
// 
// function delete_box(box_id) {
//   d3.select("#" + box_id).remove();
// }
//                                                                                    
// function finish_box() {
//   /* If the adjust_box handler was never invoked, or if the box is too small to
//       act right, we just drop it and move on
//   */
//   if (!rect_adjusted || rect.attr("width") <= 20 || rect.attr("height") <= 20) {
//     /* start_box sets the current g element's id to '#box_<box_current_id>', which
//         we need since there's no good way to know what box we're dealing with
//         otherwise
//     */
//     delete_box("box_" + box_current_id);
//   }
// 
//   /* If the box was adjusted and it's big enough to work correctly, get ready for
//       next box by resetting the rect_adjusted flag, then increment the box id index
//       and add a handy hidden "delete button" to the box
//   */
//   else {
//     rect_adjusted = false;
//     box_current_id += 1;
//     delete_button =
//       g.append("rect")
//         .attr("class", "delete_button")
//         .attr("x", +rect.attr("x") + +rect.attr("width") - 15)
//         .attr("y", +rect.attr("y") + 5)
//         .attr("width", 10)
//         .attr("height", 10)
//         .attr("rx", 5)
//         .attr("ry", 5)
//         .attr("opacity", 0.0);
// 
//     delete_button.on("mouseup", function() {
//         // Need to delete the parent g elem, not just this button
//         delete_box(d3.select(this.parentNode).attr("id"));
//         /* g elem's mouseover handler removes the svg canvas's mousedown handler,
//             but we kinda need that for the next box...
//         */
//         svg.on("mousedown", start_box);
// 
//         /* ... But, we don't want the deletion click event to propagate back up to
//             the svg canvas and try to create a zero-sized box
//         */
//         d3.event.stopPropagation();
//       });
//   }
// 
//   /* No matter what happened, we need to stop handling mousemove events in the
//       svg canvas, and need to re-prime the svg canvas to handle the next click
//       event
//   */
//   svg.on("mousedown", start_box);
//   svg.on("mousemove", null);
// }
// 
// function box_mouseover() {
//   svg.on("mousedown", null);
//   d3.select(this)
//     .select(".delete_button")
//       .attr("opacity", 1.0);
// }
// 
// function box_mouseout() {
//   svg.on("mousedown", start_box);
//   d3.select(this)
//     .select(".delete_button")
//       .attr("opacity", 0.0);
// }
// 
</script>
-->
